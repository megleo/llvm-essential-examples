LLVM 为高效的编译器转换和分析提供了强大的中间表示，同时提供了调试和可视化转换的自然方法。
IR 的设计使其可以轻松映射到高级语言。 LLVM IR 提供类型化信息，可用于各种优化。
在上一章中，您学习了如何在函数和模块中创建一些简单的 LLVM 指令。
从发出二进制运算等简单示例开始，我们在模块中构造了函数，并创建了一些复杂的编程范例，例如 if-else 和循环。 
LLVM 提供了一组丰富的指令和内在函数来发出复杂的 IR。

在本章中，我们将介绍一些涉及内存操作的 LLVM IR 示例。 还将涵盖一些高级主题，例如聚合数据类型及其操作。 本章涵盖的主题如下：